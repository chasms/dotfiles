#!/bin/bash
# =====================
# Environment Variables
# =====================
  # Library Paths
    # Node Path from Homebrew I believe
    export NODE_PATH="/usr/local/lib/node_modules"
    # Yarn Path
    export YARN_PATH="`yarn global bin`"
    # Go Path
    export GOPATH=$HOME/code/go
    # GPG TTY Path
    export GPG_TTY=$(tty)
    # Python Path
    # The original version is saved in .bash_profile.pysave
    export PYTHON_PATH="/Library/Frameworks/Python.framework/Versions/3.6/bin"
    # Pip path
    export PIP_PATH="/Users/chasms/Library/Python/3.6/bin"
    # Postgres
    export POSTGRES_PATH=/Applications/Postgres.app/Contents/Versions/latest/bin
  # Configurations
    # This variable configures git to not require a message when you merge.
    export GIT_MERGE_AUTOEDIT='no'
  # Editors
    # Tells your shell that when a program requires various editors, use vscode.
    export VISUAL="code -w"
    export SVN_EDITOR="code -w"
    export GIT_EDITOR="code -w"
    export EDITOR="code -w"
  # Paths
    # The USR_PATHS variable will just store all relevant /usr paths for easier usage
    # Each path is seperate via a : and we always use absolute paths.
    # A bit about the /usr directory
    # The /usr directory is a convention from linux that creates a common place to put
    # files and executables that the entire system needs access too. It tries to be user
    # independent, so whichever user is logged in should have permissions to the /usr directory.
    # We call that /usr/local. Within /usr/local, there is a bin directory for actually
    # storing the binaries (programs) that our system would want.
    # Also, Homebrew adopts this convetion so things installed via Homebrew
    # get symlinked into /usr/local
    export USR_PATHS="/usr/local:/usr/local/sbin"
    export PATH="$USR_PATHS:$PATH:$PYTHON_PATH:$PIP_PATH:$GOPATH/bin"