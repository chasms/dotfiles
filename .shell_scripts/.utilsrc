#!/bin/bash

# USE: desktop
#      desktop subfolder
function desktop {
  cd /Users/$USER/Desktop/$@
}
# A function to easily grep for a matching process
# USE: psg postgres
function psg {
  FIRST=`echo $1 | sed -e 's/^\(.\).*/\1/'`
  REST=`echo $1 | sed -e 's/^.\(.*\)/\1/'`
  ps aux | grep "[$FIRST]$REST"
}
# A function to extract correctly any archive based on extension
# USE: extract imazip.zip
#      extract imatar.tar
function extract {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)  tar xjf $1      ;;
      *.tar.gz)   tar xzf $1      ;;
      *.bz2)      bunzip2 $1      ;;
      *.rar)      rar x $1        ;;
      *.gz)       gunzip $1       ;;
      *.tar)      tar xf $1       ;;
      *.tbz2)     tar xjf $1      ;;
      *.tgz)      tar xzf $1      ;;
      *.zip)      unzip $1        ;;
      *.Z)        uncompress $1   ;;
      *)          echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
function exists {
  [[ -f $1 ]]
}
function editbash {
  code ~/.bash_profile;
}
function rebash {
  source ~/.bash_profile;
}
function path {
  echo $PATH;
}
function mov-to-gif {
  ffmpeg -i $1 -vf "scale=1024:-1:flags=lanczos" -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $2
}

function flushdns {
  sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder
}

# takes function as $1 and list of args as $2
function select-arg {
  local CYAN=$'\e[1;36m'
  local RESET_COLOR=$'\e[m'

  # Set args
  args=( $2 exit )

  # Set select prompt PS3
  PS3="Select the arg to use with $CYAN$1$RESET_COLOR: "

  select arg in "${args[@]}"; do
    echo "You have chosen $arg"

    [[ $arg == exit ]] && break

    eval $1 "$arg"
    
    break
  done
}

function select-branches {
  select-arg "git checkout" "`find-branches $1`"
}

function find-branches {
  git branch -a | grep -v remotes | grep $1
}

function commit-log {
  local NEXT="$(date -v+1d +%F) 00:00"

  local BLACK="\x1B[30m"
  local BLACK="\x1B[32m"
  local RED="\x1B[31m"
  local GREEN="\x1B[32m"
  local YELLOW="\x1B[33m"
  local HEADING="\x1B[33m"
  local BLUE="\x1B[34m"
  local CYAN="\x1B[36m"
  local RESET="\x1B[0m"

  local SINCE="1970-01-01 00:00"
  local UNTIL=$NEXT
  local LOGS=false

  for i in "$@"
  do
  case $i in
    -h|--help)
      echo
      echo "usage: commit-log [--author|-a=<filter>][--since|-s=<date>][--until|-u=<date>][--help | -h]"
      echo
      echo "Generates git changelog grouped by day"    
      echo
      echo "Example usage:"
      echo
      echo '  $ commit-log --author="Charles Samuels" --since=1970-01-01 --until=2019-01-01'
      echo '  $ commit-log -a="Charles Samuels" -s=1970-01-01 -u=2019-01-01'
      echo
      return
      ;;
    -l|--logs)
      LOGS=true
      shift
      ;;
    -a=*|--author=*)
      local AUTHOR="${i#*=}"
      shift
    ;;
    -s=*|--since=*)
      SINCE="${i#*=}"
      shift
    ;;
    -u=*|--until=*)
      UNTIL="${i#*=}"
      shift
    ;;
    *)
      # unknown option
    ;;
  esac
  done

  local LOG_FORMAT=" %Cgreen*%Creset %s"
  
  if [ -z "$AUTHOR" ]; then
    LOG_FORMAT="$LOG_FORMAT %Cblue(%an)%Creset"
  elif $LOGS; then
    echo 
    echo -e "${BLUE}Logs filtered by author: ${CYAN}${AUTHOR}${RESET}"
    echo -e "${BLUE}Commits since ${CYAN}${SINCE}${BLUE} and until ${CYAN}${UNTIL}${RESET}"
  fi

  echo
  
  git log --no-merges --author="${AUTHOR}" --since="${SINCE}" --until="${UNTIL}" --format="%cd" --date=short | sort -u | while read DATE ; do

    local COMMITS=$(git -c color.ui=always log --no-merges --reverse --format="${LOG_FORMAT}" --since="${DATE} 00:00:00" --until="${DATE} 23:59:59" --author="${AUTHOR}")

    if [ ! -z "$COMMITS" ]
    then
      echo -e "${HEADING}[$DATE]${RESET}"
      echo -e "${COMMITS}"
      echo
    fi

  done
}

function git-by-date {
  commit-log -a="`git config --global user.name`" -s="$1 00:00" -u="$1 23:59" $@ 
}

alias git-today='git-by-date `date +%F`'

# Hidden Files
alias showFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'

alias l='ls -lah'
